{
	"info": {
		"_postman_id": "799b0376-03fd-48d6-967b-e981abecff99",
		"name": "Maya Updated Dietician API",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json"
	},
	"item": [
		{
			"name": "Admin",
			"item": [
				{
					"name": "Admin Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "79cfc374-32c9-4416-aa93-233dc104bc49",
								"exec": [
									"const response = pm.response.json();",
									"console.log(\"Running scenario:\", pm.iterationData.get(\"scenario\"));",
									"const scenario = pm.iterationData.get(\"scenario\");",
									"if (scenario === \"Valid Login\") {",
									"    const admin_token = response.token;",
									"    pm.environment.set(\"admin_token\", admin_token);",
									"    pm.test(\"Login should succeed\", function () {",
									"        pm.response.to.have.status(200);",
									"        pm.expect(pm.response.json()).to.have.property(\"token\");",
									"    });",
									"} else {",
									"    pm.test(\"Login should fail\", function () {",
									"        pm.response.to.have.status(401); // Unauthorized status code for failed login",
									"        if (scenario == \"Missing Email\"|| scenario == \"Missing both\"){",
									"            pm.expect(pm.response.json()).to.have.property(\"error\");",
									"            console.log(\"The error message is \"+response.message);",
									"        }",
									"        else{",
									"            pm.expect(pm.response.json()).to.have.property(\"errorCode\");",
									"            console.log(\"The error message is \"+response.errorMessage);",
									"        }",
									"",
									"    ",
									"    });",
									"}",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "e51135ac-6932-490e-a597-6ab7b4b77eb0",
								"exec": [
									"const requestType = pm.iterationData.get(\"requestType\");",
									"console.log(\"Running scenario:\", pm.iterationData.get(\"scenario\"));",
									"console.log(\"The request type in POST Admin Login is \"+ requestType)",
									"if (requestType!=\"createAdmin\"){",
									"    pm.execution.skipRequest();",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "47c38011-9444-4698-a49d-009354454d23",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"userLoginEmail\": \"{{userLoginEmail}}\",\n  \"password\": \"{{password}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{dieticianBaseUrl}}dietician/login"
					},
					"response": []
				}
			],
			"id": "290ccb4a-3ba3-4f04-8b9f-c7beb4f12555"
		},
		{
			"name": "Dietician",
			"item": [
				{
					"name": "create dietician",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e1dd394d-69a9-4d0c-a919-3c4c213c7451",
								"exec": [
									"// Parse the JSON response",
									"const response = pm.response.json();",
									"",
									"// Extract the dietician ID",
									"const dieticianId = response.id;",
									"",
									"// Set it as a collection variable",
									"pm.collectionVariables.set(\"dieticianID\", dieticianId);",
									"",
									"",
									"console.log(\"Dietician ID saved in collection variable: \" + dieticianId);",
									"",
									"// Extract the emailID of dietician ",
									"let dieticianEmailId = response.Email;",
									"",
									"// Set it as a collection variable",
									"pm.collectionVariables.set(\"dieticianEmailId\", dieticianEmailId);",
									"",
									"// Optional: log it for debug",
									"console.log(\"Dietician EMAIL ID saved in collection variable: \" + dieticianEmailId);",
									"",
									"// Extract the emailID password of dietician ",
									"let dieticianPassword = response.loginPassword;",
									"",
									"// Set it as a collection variable",
									"pm.collectionVariables.set(\"dieticianPassword\", dieticianPassword);",
									"",
									"// Optional: log it for debug",
									"console.log(\"Dietician EMAIL password saved in collection variable: \" + dieticianPassword);",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "0cce92aa-eb8e-4772-8434-f6fdfae3482b",
								"exec": [
									"const requestType = pm.iterationData.get(\"requestType\");",
									"console.log(\"The request type in create dietician is \"+ requestType)",
									"if (requestType!=\"createDietician\"){",
									"    pm.execution.skipRequest();",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "e7431844-57c7-4f1b-a11d-afb2fe319e15",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{admin_token}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"Firstname\": \"{{Firstname}}\",\n  \"Lastname\": \"{{Lastname}}\",\n  \"ContactNumber\": \"{{ContactNumber}}\",\n  \"DateOfBirth\": \"{{DateOfBirth}}\",\n  \"Email\": \"{{Email}}\",\n  \"HospitalName\": \"{{HospitalName}}\",\n  \"HospitalStreet\": \"{{HospitalStreet}}\",\n  \"HospitalCity\": \"{{HospitalCity}}\",\n  \"HospitalPincode\": \"{{HospitalPincode}}\",\n  \"Education\": \"{{Education}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{dieticianBaseUrl}}dietician/dietician"
					},
					"response": []
				},
				{
					"name": "dietician login",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "26a21813-2a3b-4381-9f6d-067e9fb43181",
								"exec": [
									"",
									"const requestType = pm.iterationData.get(\"requestType\");",
									"console.log(\"The request type in DIETICIAN login is \"+ requestType)",
									"",
									"if (requestType!=\"createPatient\"){",
									"    pm.execution.skipRequest();",
									"}",
									"",
									"console.log(\"Dietician Email ID for login: \" + pm.collectionVariables.get(\"dieticianEmailId\"));",
									"console.log(\"Dietician Password for login: \" + pm.collectionVariables.get(\"dieticianPassword\"));"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "86191fbb-9d80-49ef-a9bd-fcb2704bda6d",
								"exec": [
									"// Parse the JSON response",
									"let response = pm.response.json();",
									"",
									"// Extract the token",
									"let dieticianToken = response.token;",
									"",
									"// Set it as a collection variable",
									"pm.collectionVariables.set(\"dieticianToken\", dieticianToken);",
									"",
									"// Log it for debug",
									"console.log(\"dieticianToken token saved in collection variable: \" + dieticianToken);",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "af3359f4-3880-4b7a-874c-b118c4f3a59d",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{admin_token}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"userLoginEmail\": \"{{dieticianEmailId}}\",\n  \"password\": \"{{dieticianPassword}}\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{dieticianBaseUrl}}dietician/login"
					},
					"response": []
				},
				{
					"name": "delete dietician",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "f54c865d-2aad-4b35-917a-074855aa3268",
								"exec": [
									"const requestType = pm.iterationData.get(\"requestType\");",
									"console.log(\"The request type in create dietician is \"+ requestType)",
									"if (requestType!=\"deleteDietician\"){",
									"    pm.execution.skipRequest();",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "ec225475-f0ed-4836-bc66-480b3fb03a3a",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "e2c8ff3c-d025-44e4-9412-99fa52c53a04",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{admin_token}}"
							}
						},
						"method": "DELETE",
						"header": [],
						"url": "{{dieticianBaseUrl}}dietician/dietician/{{dieticianID}}"
					},
					"response": []
				},
				{
					"name": "All Dietician",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "76be5ac1-2c5b-4705-9de0-98c806828f6a",
								"exec": [
									"",
									"const requestType = pm.iterationData.get(\"requestType\");",
									"console.log(\"The request type in All Dietician  is \"+ requestType)",
									"",
									"if (requestType!=\"createPatient\"){",
									"    pm.execution.skipRequest();",
									"}",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "d2930cf1-7361-402c-9e3b-c4b03cf73c0e",
								"exec": [
									"// 1. Test that response status is 200 OK",
									"pm.test(\"Status code is 200\", () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// 2. Test that response is an array",
									"pm.test(\"Response is an array\", () => {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.an('array');",
									"});",
									"",
									"// 3. Test that the array has at least 1 element",
									"pm.test(\"Response array is not empty\", () => {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.length).to.be.above(0);",
									"});",
									"",
									"// 4. Test all required fields exist in each object",
									"pm.test(\"Each item has required fields\", () => {",
									"    const jsonData = pm.response.json();",
									"    jsonData.forEach(item => {",
									"        pm.expect(item).to.have.all.keys(",
									"            \"id\", \"Firstname\", \"Lastname\", \"ContactNumber\", \"DateOfBirth\", ",
									"            \"Email\", \"HospitalName\", \"HospitalStreet\", \"HospitalCity\", \"HospitalPincode\", \"Education\"",
									"        );",
									"    });",
									"});",
									"",
									"// 5. Test that id is a positive integer",
									"pm.test(\"Each id is a positive integer\", () => {",
									"    const jsonData = pm.response.json();",
									"    jsonData.forEach(item => {",
									"        pm.expect(item.id).to.be.a('number').and.to.be.above(0);",
									"    });",
									"});",
									"",
									"// 6. Test Firstname and Lastname are non-empty strings",
									"pm.test(\"First and Last names are non-empty strings\", () => {",
									"    const jsonData = pm.response.json();",
									"    jsonData.forEach(item => {",
									"        pm.expect(item.Firstname).to.be.a('string').and.not.be.empty;",
									"        pm.expect(item.Lastname).to.be.a('string').and.not.be.empty;",
									"    });",
									"});",
									"",
									"// 7. Test ContactNumber matches a phone number pattern (10 digits)",
									"pm.test(\"ContactNumber is a 10 digit number\", () => {",
									"    const phoneRegex = /^\\d{10}$/;",
									"    const jsonData = pm.response.json();",
									"    jsonData.forEach(item => {",
									"        pm.expect(item.ContactNumber).to.match(phoneRegex);",
									"    });",
									"});",
									"",
									"// 8. Test DateOfBirth is a valid date in YYYY-MM-DD format",
									"pm.test(\"DateOfBirth is valid date\", () => {",
									"    const dateRegex = /^\\d{4}-\\d{2}-\\d{2}$/;",
									"    const jsonData = pm.response.json();",
									"    jsonData.forEach(item => {",
									"        pm.expect(item.DateOfBirth).to.match(dateRegex);",
									"        const date = new Date(item.DateOfBirth);",
									"        pm.expect(date.toString()).to.not.equal(\"Invalid Date\");",
									"    });",
									"});",
									"",
									"// 9. Test Email is valid format",
									"pm.test(\"Email is valid\", () => {",
									"    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;",
									"    const jsonData = pm.response.json();",
									"    jsonData.forEach(item => {",
									"        pm.expect(item.Email).to.match(emailRegex);",
									"    });",
									"});",
									"",
									"// 10. Test HospitalPincode is numeric and length is 6 (common for Indian pincodes)",
									"pm.test(\"HospitalPincode is 6 digit number\", () => {",
									"    const pinRegex = /^\\d{6}$/;",
									"    const jsonData = pm.response.json();",
									"    jsonData.forEach(item => {",
									"        pm.expect(item.HospitalPincode).to.match(pinRegex);",
									"    });",
									"});",
									"",
									"// 11. Test Education field is a non-empty string",
									"pm.test(\"Education field is non-empty string\", () => {",
									"    const jsonData = pm.response.json();",
									"    jsonData.forEach(item => {",
									"        pm.expect(item.Education).to.be.a('string').and.not.be.empty;",
									"    });",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "ffe05bd0-aabc-4824-b8ed-1bbc7cd9140a",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{admin_token}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{dieticianBaseUrl}}dietician/dietician"
					},
					"response": []
				},
				{
					"name": "DieticianId",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "92b33217-0997-4f4c-aaa7-4cccc24acc0f",
								"exec": [
									"const requestType = pm.iterationData.get(\"requestType\");",
									"console.log(\"The request type in All Dietician  is \"+ requestType)",
									"",
									"if (requestType!=\"createPatient\"){",
									"    pm.execution.skipRequest();",
									"}",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "d1990a9a-3d4a-4fa9-bebf-590eb53b0a2f",
								"exec": [
									"const jsonData = pm.response.json();",
									"",
									"// 1. Check status is 200 OK",
									"pm.test(\"Status code is 200\", () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// 2. All expected fields exist",
									"pm.test(\"All required fields are present\", () => {",
									"    pm.expect(jsonData).to.have.all.keys(",
									"        \"id\", \"Firstname\", \"Lastname\", \"ContactNumber\", \"DateOfBirth\",",
									"        \"Email\", \"HospitalName\", \"HospitalStreet\", \"HospitalCity\", \"HospitalPincode\", \"Education\"",
									"    );",
									"});",
									"",
									"// 3. ID is a positive number",
									"pm.test(\"id is a positive number\", () => {",
									"    pm.expect(jsonData.id).to.be.a(\"number\").and.to.be.above(0);",
									"});",
									"",
									"// 4. Firstname and Lastname are non-empty strings",
									"pm.test(\"Firstname and Lastname are valid\", () => {",
									"    pm.expect(jsonData.Firstname).to.be.a(\"string\").and.not.be.empty;",
									"    pm.expect(jsonData.Lastname).to.be.a(\"string\").and.not.be.empty;",
									"});",
									"",
									"// 5. ContactNumber is a 10-digit number string",
									"pm.test(\"ContactNumber is a valid 10-digit number\", () => {",
									"    pm.expect(jsonData.ContactNumber).to.match(/^\\d{10}$/);",
									"});",
									"",
									"// 6. DateOfBirth is a valid date in YYYY-MM-DD format",
									"pm.test(\"DateOfBirth is valid and properly formatted\", () => {",
									"    pm.expect(jsonData.DateOfBirth).to.match(/^\\d{4}-\\d{2}-\\d{2}$/);",
									"    const dob = new Date(jsonData.DateOfBirth);",
									"    pm.expect(dob.toString()).to.not.equal(\"Invalid Date\");",
									"});",
									"",
									"// 7. Email is valid",
									"pm.test(\"Email format is valid\", () => {",
									"    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;",
									"    pm.expect(jsonData.Email).to.match(emailRegex);",
									"});",
									"",
									"// 8. Hospital name, street, and city are valid strings",
									"pm.test(\"Hospital details are valid\", () => {",
									"    [\"HospitalName\", \"HospitalStreet\", \"HospitalCity\"].forEach(key => {",
									"        pm.expect(jsonData[key]).to.be.a(\"string\").and.not.be.empty;",
									"    });",
									"});",
									"",
									"// 9. HospitalPincode is a valid 6-digit number",
									"pm.test(\"HospitalPincode is valid\", () => {",
									"    pm.expect(jsonData.HospitalPincode).to.match(/^\\d{6}$/);",
									"});",
									"",
									"// 10. Education is a non-empty string",
									"pm.test(\"Education field is valid\", () => {",
									"    pm.expect(jsonData.Education).to.be.a(\"string\").and.not.be.empty;",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "816405be-9d37-4127-ae02-d517a189b15e",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{admin_token}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{dieticianBaseUrl}}dietician/dietician/{{dieticianID}}"
					},
					"response": []
				},
				{
					"name": "LogoutDietician",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "2932c5cf-addf-4698-b905-ee0eb1ca1cff",
								"exec": [
									"const requestType = pm.iterationData.get(\"requestType\");",
									"console.log(\"The request type in LogoutDietician  is \"+ requestType)",
									"",
									"if (requestType!=\"logoutDietician\"){",
									"    pm.execution.skipRequest();",
									"}",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "6fafc972-7b57-4918-9636-2f7c23087b5e",
								"exec": [
									"// 1. Status code is 200",
									"pm.test(\"Status code is 200\", () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// 2. Response body is \"Logout successful\"",
									"pm.test(\"Logout message is correct\", () => {",
									"    const resText = pm.response.text();",
									"    pm.expect(resText).to.eql(\"Logout successful\");",
									"});",
									"",
									"// 3. Content-Type is plain text",
									"pm.test(\"Content-Type is text/plain\", () => {",
									"    pm.response.to.have.header(\"Content-Type\", \"text/plain;charset=UTF-8\");",
									"});",
									"",
									"// 4. Cache control headers are present and correct",
									"pm.test(\"Cache control headers are set to no-cache\", () => {",
									"    pm.expect(pm.response.headers.get(\"Cache-Control\")).to.include(\"no-cache\");",
									"    pm.expect(pm.response.headers.get(\"Pragma\")).to.eql(\"no-cache\");",
									"    pm.expect(pm.response.headers.get(\"Expires\")).to.eql(\"0\");",
									"});",
									"",
									"// 5. Security headers are set",
									"pm.test(\"Security headers are present\", () => {",
									"    pm.expect(pm.response.headers.get(\"X-Content-Type-Options\")).to.eql(\"nosniff\");",
									"    pm.expect(pm.response.headers.get(\"X-Frame-Options\")).to.eql(\"DENY\");",
									"    pm.expect(pm.response.headers.get(\"X-Xss-Protection\")).to.include(\"1\");",
									"    pm.expect(pm.response.headers.get(\"Strict-Transport-Security\")).to.include(\"max-age\");",
									"});",
									"",
									"// 6. Response length is 17 (for \"Logout successful\")",
									"pm.test(\"Response content length is correct\", () => {",
									"    const len = parseInt(pm.response.headers.get(\"Content-Length\"));",
									"    pm.expect(len).to.eql(17);",
									"});",
									"",
									"// 7. NEL/Reporting headers are present (optional but useful for observability)",
									"pm.test(\"NEL and Report-To headers are present\", () => {",
									"    pm.expect(pm.response.headers.has(\"NEL\")).to.be.true;",
									"    pm.expect(pm.response.headers.has(\"Report-To\")).to.be.true;",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "73bd5cdc-4355-4a2b-bf69-34d04e35124c",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{dieticianToken}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{dieticianBaseUrl}}dietician/logoutdietician"
					},
					"response": []
				},
				{
					"name": "Update Dietician",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "3112e7ea-89f3-485c-b873-68a092514b28",
								"exec": [
									"const requestType = pm.iterationData.get(\"requestType\");",
									"console.log(\"The request type in Update Dietician is \"+ requestType)",
									"if (requestType!=\"updateDietician\"){",
									"    pm.execution.skipRequest();",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "386873a9-155e-4eae-bcee-f1ae13f10802",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"let jsonData = pm.response.json();",
									"",
									"// Only Email is static; everything else is from iteration data",
									"let expectedData = {",
									"    Firstname: pm.iterationData.get(\"Firstname\"),",
									"    Lastname: pm.iterationData.get(\"Lastname\"),",
									"    ContactNumber: String(pm.iterationData.get(\"ContactNumber\")),",
									"    DateOfBirth: pm.iterationData.get(\"DateOfBirth\"),",
									"    HospitalName: pm.iterationData.get(\"HospitalName\"),",
									"    HospitalStreet: pm.iterationData.get(\"HospitalStreet\"),",
									"    HospitalCity: pm.iterationData.get(\"HospitalCity\"),",
									"    HospitalPincode: String(pm.iterationData.get(\"HospitalPincode\")),",
									"    Education: pm.iterationData.get(\"Education\")",
									"};",
									"",
									"// 1. Validate static Email",
									"pm.test(\"Email remains unchanged\", function () {",
									"    pm.expect(jsonData.Email).to.eql(pm.collectionVariables.get(\"dieticianEmailId\"));",
									"});",
									"",
									"// 2. Validate ID remains the same ",
									"pm.test(\"ID remains unchanged\", function () {",
									"    pm.expect(jsonData.id).to.eql(pm.collectionVariables.get(\"dieticianID\"));",
									"});",
									"// 3. Validate each dynamic field matches iteration data",
									"for (let key in expectedData) {",
									"    pm.test(`${key} matches iteration data`, function () {",
									"        pm.expect(jsonData[key]).to.eql(expectedData[key]);",
									"    });",
									"}",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "60b92ae0-675b-484f-9dfb-ddaa7cfaff01",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{admin_token}}"
							}
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"Firstname\": \"{{Firstname}}\",\n  \"Lastname\": \"{{Lastname}}\",\n  \"ContactNumber\": \"{{ContactNumber}}\",\n  \"DateOfBirth\": \"{{DateOfBirth}}\",\n  \"Email\": \"{{Email}}\",\n  \"HospitalName\": \"{{HospitalName}}\",\n  \"HospitalStreet\": \"{{HospitalStreet}}\",\n  \"HospitalCity\": \"{{HospitalCity}}\",\n  \"HospitalPincode\": \"{{HospitalPincode}}\",\n  \"Education\": \"{{Education}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{dieticianBaseUrl}}dietician/dietician/{{dieticianID}}"
					},
					"response": []
				}
			],
			"id": "bf40829a-042b-4ffc-9bd3-4baadf50e002"
		},
		{
			"name": "Patient",
			"item": [
				{
					"name": "create new patient",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "52a3706c-d6c0-4915-ba71-1361b2f612f9",
								"exec": [
									"const requestType = pm.iterationData.get(\"requestType\");",
									"console.log(\"The request type in CREATE PATIENT  is \"+ requestType)",
									"if (requestType !== \"createPatient\") {",
									"    console.log(\"Skipping this iteration as requestType is not createPatient\");",
									"    ",
									"     pm.execution.skipRequest();",
									"} else {",
									"    // Build patientInfo JSON dynamically",
									"    let patientInfo = {",
									"        \"FirstName\": pm.iterationData.get(\"Firstname\"),",
									"        \"LastName\": pm.iterationData.get(\"Lastname\"),",
									"        \"ContactNumber\": pm.iterationData.get(\"ContactNumber\"),",
									"        \"Email\": pm.iterationData.get(\"Email\"),",
									"        \"Allergy\": pm.iterationData.get(\"Allergy\"),",
									"        \"FoodPreference\": pm.iterationData.get(\"FoodPreference\"),",
									"        \"CuisineCategory\": pm.iterationData.get(\"CuisineCategory\"),",
									"        \"DateOfBirth\": pm.iterationData.get(\"DateOfBirth\")",
									"    };",
									"    pm.collectionVariables.set(\"patientInfo\", JSON.stringify(patientInfo));",
									"    let vitals = {",
									"        \"Weight\": pm.iterationData.get(\"Weight\"),",
									"        \"Height\": pm.iterationData.get(\"Height\"),",
									"        \"Temperature\": pm.iterationData.get(\"Temperature\"),",
									"        \"SP\": pm.iterationData.get(\"SP\"),",
									"        \"DP\": pm.iterationData.get(\"DP\")",
									"    };",
									"    pm.collectionVariables.set(\"vitals\", JSON.stringify(vitals));",
									"}",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "a4bf7a1a-e773-41d6-ae69-5cffa2598f6a",
								"exec": [
									"// Parse the JSON response",
									"const response = pm.response.json();",
									"console.log(\"patient response\");",
									"console.log(response);",
									"console.log(\"patient response\");",
									"",
									"// Extract the patient ID",
									"const patientId = response.patientId;",
									"",
									"// Extract the keys from FileMorbidity",
									"const fileMorbidityObject = response.FileMorbidity;",
									"const fileMorbidityIds = Object.keys(fileMorbidityObject);",
									"",
									"// Log for debugging",
									"console.log(\"Patient ID:\", patientId);",
									"console.log(\"File Morbidity IDs:\", fileMorbidityIds);",
									"",
									"// Save to collection variables",
									"pm.collectionVariables.set(\"patientId\", patientId);",
									"pm.collectionVariables.set(\"FileMorbidityFileIDS\", JSON.stringify(fileMorbidityIds));",
									"",
									"// Set it as a collection variable",
									"pm.collectionVariables.set(\"patientId\", patientId);",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "03408939-4681-44d1-a562-afea3757e44a",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{dieticianToken}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "patientInfo",
									"value": "{{patientInfo}}",
									"type": "text",
									"uuid": "664fd3a1-92de-4777-82b4-6d50284987fc"
								},
								{
									"key": "vitals",
									"value": "{{vitals}}",
									"type": "text",
									"uuid": "1c595025-3d00-4c98-a8fc-5276f1dae36b"
								},
								{
									"key": "file",
									"type": "file",
									"uuid": "1c2196f9-d17b-4170-99c1-a8685b107b24",
									"src": [
										"postman-cloud:///1f06e54b-4589-4da0-b46d-229e982233b3",
										"/Users/maya/Downloads/Sample reports/HyperThyroid_Report_final.pdf",
										"/Users/maya/Downloads/Sample reports/Hypo_Thyroid_Report.pdf"
									]
								}
							]
						},
						"url": "{{dieticianBaseUrl}}dietician/patient"
					},
					"response": []
				},
				{
					"name": "All Patient",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "7809de1d-7600-4888-9bbc-b9a2ef0a66ef",
								"exec": [
									"const requestType = pm.iterationData.get(\"requestType\");",
									"console.log(\"The request type in GET All Patient  is \"+ requestType)",
									"if (requestType !== \"getAllPatient\") {",
									"    console.log(\"Skipping this iteration as requestType is not getAllPatient\");",
									"    ",
									"     pm.execution.skipRequest();",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "43959805-0c35-4931-90ea-f5a6b8c038dc",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"//Check presence of required keys at the top level",
									"pm.test(\"Has required patient fields\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData[0]).to.have.all.keys(\"patientId\", \"FirstName\", \"LastName\", \"ContactNumber\", \"Email\", \"Allergy\", \"FoodPreference\", \"CuisineCategory\", \"FileMorbidity\", \"FileMorbidityCondition\", \"DateOfBirth\", \"DieticianId\", \"Vitals\", \"LastVisitDate\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "7f98b7a3-8d2c-4a52-91cd-683cfc25a858",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{dieticianToken}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{dieticianBaseUrl}}dietician/patient"
					},
					"response": []
				},
				{
					"name": "PatientID",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "68147b9e-1ca0-4b35-b702-7ffeeed69937",
								"exec": [
									"const requestType = pm.iterationData.get(\"requestType\");",
									"console.log(\"The request type in GET All Patient  is \"+ requestType)",
									"if (requestType !== \"getAllPatient\") {",
									"    console.log(\"Skipping this iteration as requestType is not getAllPatient\");",
									"    ",
									"     pm.execution.skipRequest();",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "6b2abc83-0b77-4a96-90db-93364aaf5f0b",
								"exec": [
									"const jsonData = pm.response.json();",
									"pm.test(\"Status code is 200\",function(){",
									"    pm.response.to.have.status(200);",
									"});",
									"// 2. Validate main keys exist",
									"pm.test(\"Main keys exist\", () => {",
									"    pm.expect(jsonData).to.have.all.keys(",
									"        \"patientId\", \"FirstName\", \"LastName\", \"ContactNumber\", \"Email\",",
									"        \"Allergy\", \"FoodPreference\", \"CuisineCategory\",",
									"        \"FileMorbidity\", \"FileMorbidityCondition\",",
									"        \"DateOfBirth\", \"DieticianId\", \"Vitals\", \"LastVisitDate\"",
									"    );",
									"});",
									"",
									"// 3. patientId is a positive integer",
									"pm.test(\"patientId is positive integer\", () => {",
									"    pm.expect(jsonData.patientId).to.be.a('number').and.to.be.above(0);",
									"});",
									"",
									"// 4. FirstName and LastName are non-empty strings",
									"pm.test(\"FirstName and LastName are valid strings\", () => {",
									"    pm.expect(jsonData.FirstName).to.be.a('string').and.not.be.empty;",
									"    pm.expect(jsonData.LastName).to.be.a('string').and.not.be.empty;",
									"});",
									"",
									"// 5. ContactNumber is a 10 digit number string",
									"pm.test(\"ContactNumber format is valid\", () => {",
									"    pm.expect(jsonData.ContactNumber).to.match(/^\\d{10}$/);",
									"});",
									"",
									"// 6. Email format is valid",
									"pm.test(\"Email format is valid\", () => {",
									"    pm.expect(jsonData.Email).to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/);",
									"});",
									"",
									"// 7. Allergy, FoodPreference, CuisineCategory are non-empty strings",
									"pm.test(\"Allergy, FoodPreference, CuisineCategory are non-empty strings\", () => {",
									"    [\"Allergy\", \"FoodPreference\", \"CuisineCategory\"].forEach(key => {",
									"        pm.expect(jsonData[key]).to.be.a('string').and.not.be.empty;",
									"    });",
									"});",
									"",
									"// 8. FileMorbidity is an object and each morbidity has keys and string values",
									"pm.test(\"FileMorbidity has expected structure\", () => {",
									"    pm.expect(jsonData.FileMorbidity).to.be.an('object');",
									"    for (const morbidityId in jsonData.FileMorbidity) {",
									"        pm.expect(jsonData.FileMorbidity[morbidityId]).to.be.an('object');",
									"        for (const param in jsonData.FileMorbidity[morbidityId]) {",
									"            pm.expect(jsonData.FileMorbidity[morbidityId][param]).to.be.a('string').and.not.be.empty;",
									"        }",
									"    }",
									"});",
									"",
									"// 9. FileMorbidityCondition is an object with string values",
									"pm.test(\"FileMorbidityCondition has expected structure\", () => {",
									"    pm.expect(jsonData.FileMorbidityCondition).to.be.an('object');",
									"    for (const morbidityId in jsonData.FileMorbidityCondition) {",
									"        pm.expect(jsonData.FileMorbidityCondition[morbidityId]).to.be.a('string').and.not.be.empty;",
									"    }",
									"});",
									"",
									"// 10. DateOfBirth is valid date in YYYY-MM-DD format and a reasonable year",
									"pm.test(\"DateOfBirth is valid date\", () => {",
									"    pm.expect(jsonData.DateOfBirth).to.match(/^\\d{4}-\\d{2}-\\d{2}$/);",
									"    const dob = new Date(jsonData.DateOfBirth);",
									"    pm.expect(dob.toString()).to.not.equal(\"Invalid Date\");",
									"    pm.expect(dob.getFullYear()).to.be.within(1900, new Date().getFullYear());",
									"});",
									"",
									"// 11. DieticianId is a positive number",
									"pm.test(\"DieticianId is positive number\", () => {",
									"    pm.expect(jsonData.DieticianId).to.be.a('number').and.to.be.above(0);",
									"});",
									"",
									"// 12. Vitals is an object with numeric values",
									"pm.test(\"Vitals has expected structure and numeric values\", () => {",
									"    pm.expect(jsonData.Vitals).to.be.an('object');",
									"    for (const morbidityId in jsonData.Vitals) {",
									"        const vitalsObj = jsonData.Vitals[morbidityId];",
									"        [\"Weight\", \"Height\", \"Temperature\", \"SP\", \"DP\"].forEach(key => {",
									"            pm.expect(vitalsObj[key]).to.be.a('number');",
									"        });",
									"    }",
									"});",
									"",
									"// 13. LastVisitDate is valid ISO date string",
									"pm.test(\"LastVisitDate is valid ISO 8601 date string\", () => {",
									"    const lastVisit = new Date(jsonData.LastVisitDate);",
									"    pm.expect(lastVisit.toString()).to.not.equal(\"Invalid Date\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "423cc6cb-3e37-4c83-b8c3-7774515e21aa",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{dieticianToken}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{dieticianBaseUrl}}dietician/patient/{{patientId}}"
					},
					"response": []
				},
				{
					"name": "delete patient",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7c095983-dcb7-4cee-a1e8-1aeef505edaa",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "576c9999-9e2b-46e0-a630-30760673586e",
								"exec": [
									"const requestType = pm.iterationData.get(\"requestType\");",
									"console.log(\"The request type in DELETE Patient  is \"+ requestType)",
									"if (requestType!=\"deletePatient\"){",
									"    pm.execution.skipRequest();",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "ebef5885-af90-4267-9d5f-355cf4fdef49",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{dieticianToken}}"
							}
						},
						"method": "DELETE",
						"header": [],
						"url": "{{dieticianBaseUrl}}dietician/patient/{{patientId}}"
					},
					"response": []
				},
				{
					"name": "TestReports PatientID",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5d38172c-6a2e-4229-8099-6e073b1b7e7a",
								"exec": [
									"pm.test(\"Status code is 200\",function(){",
									"    pm.response.to.have.status(200);",
									"});",
									"//Validate Response is an Array and Has Expected Length",
									"const response = pm.response.json();",
									"",
									"pm.test(\"Response is an array\", function () {",
									"    pm.expect(response).to.be.an('array');",
									"});",
									"",
									"pm.test(\"Contains 3 reports\", function () {",
									"    pm.expect(response.length).to.eql(3); // adjust if needed",
									"});",
									"//Validate Each Report Has Required Fields",
									"",
									"response.forEach((report, index) => {",
									"    pm.test(`Report ${index + 1} has required fields`, function () {",
									"        pm.expect(report).to.have.property(\"fileId\");",
									"        pm.expect(report).to.have.property(\"fileName\");",
									"        pm.expect(report).to.have.property(\"uploadDate\");",
									"        pm.expect(report).to.have.property(\"morbidConditions\");",
									"        pm.expect(report).to.have.property(\"morbidConditionStr\");",
									"    });",
									"});",
									"",
									"",
									"//Validate File Names End with .pdf",
									"",
									"response.forEach((report, index) => {",
									"    pm.test(`Report ${index + 1} file name ends with .pdf`, function () {",
									"        pm.expect(report.fileName.toLowerCase()).to.match(/\\.pdf$/);",
									"    });",
									"});",
									"//Validate Upload Dates Are ISO Strings",
									"response.forEach((report, index) => {",
									"    pm.test(`Report ${index + 1} uploadDate is ISO format`, function () {",
									"        pm.expect(new Date(report.uploadDate).toString()).to.not.eql(\"Invalid Date\");",
									"    });",
									"});",
									"//Check Morbid Conditions Are Not Empty",
									"response.forEach((report, index) => {",
									"    pm.test(`Report ${index + 1} has morbid conditions`, function () {",
									"        pm.expect(Object.keys(report.morbidConditions).length).to.be.above(0);",
									"    });",
									"});",
									"//Check for Optional Vitals and Validate Fields (if present)",
									"",
									"response.forEach((report, index) => {",
									"    if (report.vitals) {",
									"        pm.test(`Report ${index + 1} vitals are present`, function () {",
									"            pm.expect(report.vitals).to.have.all.keys(\"Weight\", \"Height\", \"Temperature\", \"SP\", \"DP\");",
									"        });",
									"    }",
									"});",
									" //Extract File IDs or Filter by Conditions",
									" const fileIds = response.map(r => r.fileId);",
									"pm.collectionVariables.set(\"uploadedFileIds\", JSON.stringify(fileIds));",
									"",
									"const thyroidFiles = response.filter(r => r.morbidConditionStr.includes(\"Thyroid\"));",
									"console.log(\"Thyroid-related files:\", thyroidFiles);",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "5a0f3e50-9124-41bf-b5d9-8b36b7d6f3ac",
								"exec": [
									"const requestType = pm.iterationData.get(\"requestType\");",
									"console.log(\"The request type in GET All Patient  is \"+ requestType)",
									"if (requestType !== \"getAllPatient\") {",
									"    console.log(\"Skipping this iteration as requestType is not getAllPatient\");",
									"    ",
									"     pm.execution.skipRequest();",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "159663b3-0841-4a78-8c1c-c7a31902b18a",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{dieticianToken}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{dieticianBaseUrl}}dietician/patient/testReports/{{patientId}}"
					},
					"response": []
				},
				{
					"name": "Patient FileID",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "6ef5fb1a-b79b-4d9a-8c85-dec2fd69f2dd",
								"exec": [
									"const requestType = pm.iterationData.get(\"requestType\");",
									"console.log(\"The request type in GET All Patient  is \"+ requestType)",
									"if (requestType !== \"getAllPatient\") {",
									"    console.log(\"Skipping this iteration as requestType is not getAllPatient\");",
									"    ",
									"     pm.execution.skipRequest();",
									"}",
									"else{",
									"    //get the file ID from the collection variable FileMorbidityFileIDS",
									"   let fileIds = JSON.parse(pm.collectionVariables.get(\"FileMorbidityFileIDS\"));",
									"   // Take the first one and use it in the current request",
									"let currentFileId = fileIds.shift();",
									"// Set this file ID for use in request URL",
									"pm.variables.set(\"fileID\", currentFileId);",
									"// Save the remaining file IDs back to the collection variable",
									"pm.collectionVariables.set(\"FileMorbidityFileIDS\", JSON.stringify(fileIds));",
									"// Decide whether to continue looping",
									"if (fileIds.length > 0) {",
									"    // Go to this same request again",
									"    pm.execution.setNextRequest(pm.info.requestName);",
									"} else {",
									"    // End the run",
									"    pm.execution.setNextRequest(null);",
									"}",
									"",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "beb65572-745a-4de1-913b-6217225e7d39",
								"exec": [
									"pm.test(\"Status code is 200\",function(){",
									"    pm.response.to.have.status(200);",
									"});",
									"// /Validate that the API is returning the correct media type for PDF",
									"pm.test(\"Content-Type is application/pdf\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/pdf\");",
									"});",
									"//Response Body is Not Empty",
									"pm.test(\"Response body is not empty\", function () {",
									"    pm.expect(pm.response.text().length).to.be.above(0);",
									"});",
									"//Validate Content-Disposition has correct filename",
									"pm.test(\"Content-Disposition is attachment with .pdf filename\", function () {",
									"    const contentDisp = pm.response.headers.get(\"Content-Disposition\");",
									"    pm.expect(contentDisp).to.include(\"attachment;\");",
									"    pm.expect(contentDisp).to.match(/filename=\".*\\.pdf\"/i);",
									"});",
									"//Extract and verify filename ends with .pdf",
									"pm.test(\"Filename ends with .pdf\", function () {",
									"    const contentDisp = pm.response.headers.get(\"Content-Disposition\");",
									"    const filenameMatch = contentDisp.match(/filename\\s*=\\s*\"?([^\"]+\\.pdf)\"?/i);",
									"    pm.expect(filenameMatch).to.not.be.null;",
									"    const filename = filenameMatch[1];",
									"    console.log(\"Extracted filename:\", filename);",
									"    pm.expect(filename.toLowerCase().endsWith(\".pdf\")).to.be.true;",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "1364e48c-9116-49fb-9ca7-146cca2ae9e9",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{dieticianToken}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{dieticianBaseUrl}}dietician/patient/testReports/viewFile/{{fileID}}"
					},
					"response": []
				},
				{
					"name": "Update Patient",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "8d0ffbaf-f31d-4c8d-a979-2a09ec16e88d",
								"exec": [
									"const requestType = pm.iterationData.get(\"requestType\");",
									"console.log(\"The request type in Update Patient  is \"+ requestType)",
									"if (requestType !== \"updatePatient\") {",
									"    console.log(\"Skipping this iteration as requestType is not Update Patient\");",
									"    ",
									"     pm.execution.skipRequest();",
									"} else {",
									"    // Build patientInfo JSON dynamically",
									"    let patientInfo = {",
									"        \"FirstName\": pm.iterationData.get(\"Firstname\"),",
									"        \"LastName\": pm.iterationData.get(\"Lastname\"),",
									"        \"ContactNumber\": pm.iterationData.get(\"ContactNumber\"),",
									"        \"Email\": pm.iterationData.get(\"Email\"),",
									"        \"Allergy\": pm.iterationData.get(\"Allergy\"),",
									"        \"FoodPreference\": pm.iterationData.get(\"FoodPreference\"),",
									"        \"CuisineCategory\": pm.iterationData.get(\"CuisineCategory\"),",
									"        \"DateOfBirth\": pm.iterationData.get(\"DateOfBirth\"),",
									"",
									"    };",
									"    pm.collectionVariables.set(\"patientInfo\", JSON.stringify(patientInfo));",
									"    let vitals = {",
									"        \"Weight\": pm.iterationData.get(\"Weight\"),",
									"        \"Height\": pm.iterationData.get(\"Height\"),",
									"        \"Temperature\": pm.iterationData.get(\"Temperature\"),",
									"        \"SP\": pm.iterationData.get(\"SP\"),",
									"        \"DP\": pm.iterationData.get(\"DP\")",
									"    };",
									"    pm.collectionVariables.set(\"vitals\", JSON.stringify(vitals));",
									"}",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "d007a4b3-7a99-4307-86f4-bb29d4611ff2",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"let jsonData = pm.response.json();",
									"",
									"// Static or server-controlled fields",
									"pm.test(\"patientId is present and valid\", () => {",
									"    pm.expect(jsonData.patientId).to.be.a(\"number\").and.to.be.above(0);",
									"});",
									"",
									"// Validate fields updated from iteration data",
									"let expectedData = {",
									"    FirstName: pm.iterationData.get(\"Firstname\"),",
									"    LastName: pm.iterationData.get(\"Lastname\"),",
									"    ContactNumber: String(pm.iterationData.get(\"ContactNumber\")),",
									"    Allergy: pm.iterationData.get(\"Allergy\"),",
									"    FoodPreference: pm.iterationData.get(\"FoodPreference\"),",
									"    CuisineCategory: pm.iterationData.get(\"CuisineCategory\"),",
									"    DateOfBirth: pm.iterationData.get(\"DateOfBirth\"),",
									"    DieticianId: pm.collectionVariables.get(\"dieticianID\"), ",
									"    Email: pm.iterationData.get(\"Email\")",
									"",
									"};",
									"",
									"// Validate each field",
									"for (let key in expectedData) {",
									"    pm.test(`${key} matches expected`, () => {",
									"        let expected = expectedData[key];",
									"        let actual = jsonData[key];",
									"        ",
									"        // Match string vs number properly",
									"        if (typeof expected === \"number\") {",
									"            pm.expect(actual).to.eql(expected);",
									"        } else {",
									"            pm.expect(actual).to.eql(String(expected));",
									"        }",
									"    });",
									"",
									"    // 2. Validate ID remains the same ",
									"pm.test(\"Patient ID remains unchanged\", function () {",
									"    pm.expect(jsonData.patientId).to.eql(pm.collectionVariables.get(\"patientId\"));",
									"});",
									"}",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "4681c825-d752-4d9c-80d1-1edae57d49d6",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{dieticianToken}}"
							}
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "patientInfo",
									"value": "{{patientInfo}}",
									"type": "text",
									"uuid": "5d92c7db-d8d3-42fc-94e7-5db470bf1cb3"
								},
								{
									"key": "vitals",
									"value": "{{vitals}}",
									"type": "text",
									"uuid": "f4b2e353-6ad5-4753-8d72-9bc1d771641b"
								}
							]
						},
						"url": "{{dieticianBaseUrl}}dietician/patient/{{patientId}}"
					},
					"response": []
				}
			],
			"id": "a7beab84-7f77-464f-88fe-824c6ff25641"
		},
		{
			"name": "Morbidiy",
			"item": [
				{
					"name": "All morbodities",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "279841df-33c8-4548-9778-2336d6cf0acd",
								"exec": [
									"const requestType = pm.iterationData.get(\"requestType\");",
									"console.log(\"The request type in create dietician is \"+ requestType)",
									"if (requestType!=\"getMorbidity\"){",
									"    pm.execution.skipRequest();",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "032835f1-ccaf-46cc-98a6-3aaa8a28976c",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const responseJson = pm.response.json();",
									"const morbidityTestNames = responseJson.map(morb => morb.morbidityTestName);",
									"const morbidityIds = responseJson.map(morb => morb.morbidityId);",
									"",
									"console.log(\"morbidityTestNames:\", morbidityTestNames);",
									"console.log(\"morbidityIds:\", morbidityIds);",
									"",
									"// ✅ Store as stringified JSON so it's recoverable as array later",
									"pm.collectionVariables.set('morbidityTestNames', JSON.stringify(morbidityTestNames));",
									"pm.collectionVariables.set('morbidityIds', JSON.stringify(morbidityIds));",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "fc82e961-e5a3-4c43-85c9-122a4139816c",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{dieticianToken}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{dieticianBaseUrl}}dietician/morbidity"
					},
					"response": []
				},
				{
					"name": "MorbidityName",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "baaffef2-6d41-4d56-9f36-f7aabfd23c9e",
								"exec": [
									"const requestType = pm.iterationData.get(\"requestType\");",
									"console.log(\"The request type in MorbidityName is \" + requestType);",
									"",
									"if (requestType !== \"getMorbidityName\") {",
									"    pm.execution.skipRequest();",
									"} else {",
									"    //  Get and parse the stringified array",
									"    let morbidityTestNames = JSON.parse(pm.collectionVariables.get('morbidityTestNames'));",
									"",
									"    //  Get the next name from the array",
									"    const currentName = morbidityTestNames.shift();",
									"",
									"    //  Set it for this request",
									"    pm.variables.set('currentMorbodityName', currentName);",
									"",
									"    //  Store the updated array back",
									"    pm.collectionVariables.set('morbidityTestNames', JSON.stringify(morbidityTestNames));",
									"",
									"    // Decide whether to continue",
									"    if (morbidityTestNames.length > 0) {",
									"        pm.execution.setNextRequest(\"MorbidityName\");",
									"    } else {",
									"        pm.execution.setNextRequest(null);",
									"    }",
									"}",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "6aa719ae-aee4-498a-8b09-c8c44236ce5d",
								"exec": [
									"pm.test(\"Status code is 200\",function(){",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "aae26421-b666-438b-b491-e3f1f67a6eb2",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{dieticianToken}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{dieticianBaseUrl}}dietician/morbidity/{{currentMorbodityName}}"
					},
					"response": []
				}
			],
			"id": "9d480953-b246-45b0-9876-05752f607484"
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "cd79d13b-db9a-433b-88b9-7ab3021168fc",
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "e4602704-91e5-4e88-9734-c5012c2ef496",
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "dieticianID",
			"value": ""
		},
		{
			"key": "dieticianEmailId",
			"value": ""
		},
		{
			"key": "dieticianPassword",
			"value": ""
		},
		{
			"key": "dieticianToken",
			"value": ""
		},
		{
			"key": "patientInfo",
			"value": ""
		},
		{
			"key": "vitals",
			"value": ""
		},
		{
			"key": "patientId",
			"value": ""
		},
		{
			"key": "morbidityTestNames",
			"value": ""
		},
		{
			"key": "morbidityIds",
			"value": ""
		},
		{
			"key": "FileMorbidityFileIDS",
			"value": ""
		},
		{
			"key": "uploadedFileIds",
			"value": ""
		}
	]
}